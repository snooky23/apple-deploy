name: CI - Core Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Ruby and FastLane Testing
  ruby-tests:
    name: Ruby & FastLane Tests
    runs-on: macos-latest
    strategy:
      matrix:
        ruby-version: ['2.7', '3.0', '3.1']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: false  # Disable cache to avoid platform issues
        
    - name: Install Ruby dependencies
      run: |
        # Add current platform to Gemfile.lock to avoid platform mismatch
        bundle lock --add-platform arm64-darwin-23 || true
        bundle lock --add-platform x86_64-darwin-23 || true
        bundle install --jobs 4 --retry 3
        
    - name: Install FastLane
      run: |
        gem install fastlane
        fastlane --version
        
    - name: Validate FastLane configuration
      run: |
        cd scripts/fastlane
        # Check Fastfile syntax
        ruby -c Fastfile
        echo "‚úÖ Fastfile syntax is valid"
        
    - name: Test Ruby use cases
      run: |
        # Test use case files can be loaded
        ruby -c scripts/domain/use_cases/setup_keychain.rb
        ruby -c scripts/domain/use_cases/create_certificates.rb
        ruby -c scripts/domain/use_cases/create_provisioning_profiles.rb
        ruby -c scripts/domain/use_cases/monitor_testflight_processing.rb

  # Shell Script Validation
  shell-tests:
    name: Shell Script Tests  
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: brew install shellcheck
      
    - name: Validate deploy.sh syntax
      run: |
        bash -n scripts/deploy.sh
        echo "‚úÖ deploy.sh syntax valid"
        
    - name: Run ShellCheck on deploy.sh
      run: |
        shellcheck -x scripts/deploy.sh || echo "‚ö†Ô∏è ShellCheck warnings found"
        
    - name: Test deploy.sh help command
      run: |
        cd scripts
        bash deploy.sh help | grep -q "iOS Publishing Automation Platform"
        echo "‚úÖ deploy.sh help command works"

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog filesystem scan
      run: |
        # Install TruffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sudo sh -s -- -b /usr/local/bin
        
        # Run filesystem scan (more reliable than git-based scanning)  
        trufflehog filesystem . --only-verified --no-update || echo "‚ö†Ô∏è TruffleHog scan completed with warnings"
        
    - name: Check for hardcoded secrets
      run: |
        # Check for potential API keys, passwords, etc.
        if grep -r -i "api.*key.*=" scripts/ --include="*.rb" --include="*.sh"; then
          echo "‚ö†Ô∏è Potential hardcoded API keys found"
          exit 1
        fi
        echo "‚úÖ No hardcoded secrets detected"
        
    - name: Validate documentation links
      run: |
        # Check for broken markdown links
        if command -v markdown-link-check >/dev/null 2>&1; then
          find . -name "*.md" -exec markdown-link-check {} \;
        else
          echo "üìù Skipping link check (markdown-link-check not available)"
        fi

  # Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up test environment
      run: |
        # Create test iOS project structure
        mkdir -p test_app
        cd test_app
        
        # Simulate basic Xcode project structure
        mkdir -p TestApp.xcodeproj
        touch TestApp.xcodeproj/project.pbxproj
        
        # Create basic Info.plist
        cat > Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <plist version="1.0">
        <dict>
          <key>CFBundleIdentifier</key>
          <string>com.test.app</string>
          <key>CFBundleVersion</key>
          <string>1</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0.0</string>
        </dict>
        </plist>
        EOF
        
    - name: Test apple-deploy init simulation
      run: |
        cd test_app
        
        # Simulate the init command structure creation
        mkdir -p apple_info/{certificates,profiles}
        echo "# Test config" > apple_info/config.env
        
        # Verify structure was created
        test -d apple_info/certificates || exit 1
        test -d apple_info/profiles || exit 1
        test -f apple_info/config.env || exit 1
        
        echo "‚úÖ apple-deploy init simulation successful"
        
    - name: Test deploy.sh status command
      run: |
        cd test_app
        
        # Test status command with minimal parameters
        if timeout 30 ../scripts/deploy.sh status app_identifier="com.test.app" 2>&1 | grep -q "Status Check"; then
          echo "‚úÖ deploy.sh status command works"
        else
          echo "‚ö†Ô∏è deploy.sh status command needs parameters"
        fi

  # Performance and Compatibility
  compatibility-tests:
    name: macOS Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, macos-13, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check system requirements
      run: |
        echo "üñ•Ô∏è Testing on $(sw_vers -productName) $(sw_vers -productVersion)"
        
        # Check required tools
        command -v ruby && ruby --version
        command -v xcodebuild && xcodebuild -version
        command -v plutil && plutil -help
        command -v security && security -h
        
        echo "‚úÖ System requirements check passed"
        
    - name: Test script compatibility
      run: |
        # Test if scripts run without errors on this macOS version
        bash -n scripts/deploy.sh
        echo "‚úÖ Scripts compatible with $(sw_vers -productVersion)"
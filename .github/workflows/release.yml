name: Release Automation

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  # Create and Push Release Tag
  create-release-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      tag_name: ${{ steps.bump.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
    - name: Get current version
      id: current
      run: |
        # Extract current version from Homebrew formula or default
        if [ -f ios-deploy-platform.rb ]; then
          CURRENT=$(grep 'version "' ios-deploy-platform.rb | sed 's/.*version "\(.*\)".*/\1/')
        else
          CURRENT="2.10.0"
        fi
        
        echo "current_version=${CURRENT}" >> $GITHUB_OUTPUT
        echo "📋 Current version: ${CURRENT}"
        
    - name: Bump version
      id: bump
      run: |
        CURRENT="${{ steps.current.outputs.current_version }}"
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        
        # Parse current version (major.minor.patch)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Bump based on release type
        case $RELEASE_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "❌ Invalid release type: $RELEASE_TYPE"
            exit 1
            ;;
        esac
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        TAG_NAME="v${NEW_VERSION}"
        
        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        
        echo "🚀 Version bump: ${CURRENT} → ${NEW_VERSION} (${RELEASE_TYPE})"
        
    - name: Update version in files
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        
        # Update Homebrew formula version
        if [ -f ios-deploy-platform.rb ]; then
          sed -i "s/version \".*\"/version \"${NEW_VERSION}\"/" ios-deploy-platform.rb
          echo "✅ Updated ios-deploy-platform.rb"
        fi
        
        # Update README.md version badge
        if [ -f README.md ]; then
          sed -i "s/Version-.*-blue/Version-${NEW_VERSION}-blue/" README.md
          echo "✅ Updated README.md version badge"
        fi
        
        # Update CLAUDE.md version references
        if [ -f CLAUDE.md ]; then
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${NEW_VERSION}/g" CLAUDE.md
          echo "✅ Updated CLAUDE.md version references"
        fi
        
    - name: Create and push tag
      run: |
        TAG_NAME="${{ steps.bump.outputs.tag_name }}"
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        
        # Add and commit version changes
        git add -A
        git commit -m "chore: bump version to ${NEW_VERSION}

🚀 Release version ${NEW_VERSION}
- Updated Homebrew formula version
- Updated README.md version badge  
- Updated documentation version references
- Release type: ${{ github.event.inputs.release_type }}

🤖 Generated with GitHub Actions" || echo "No changes to commit"
        
        # Create and push tag
        git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}

🎯 Apple Deploy Platform ${NEW_VERSION}
- Production-ready iOS TestFlight automation
- Enhanced certificate and provisioning profile management  
- Smart version conflict prevention
- Advanced TestFlight processing monitoring
- Multi-team collaboration support
- Clean Architecture with comprehensive testing

Release type: ${{ github.event.inputs.release_type }}
Pre-release: ${{ github.event.inputs.pre_release }}

🤖 Generated with GitHub Actions"
        
        # Push changes and tag
        git push origin main
        git push origin "${TAG_NAME}"
        
        echo "✅ Created and pushed tag: ${TAG_NAME}"

  # Wait for Homebrew workflow to complete
  wait-for-homebrew:
    name: Wait for Homebrew Deployment
    runs-on: ubuntu-latest
    needs: create-release-tag
    
    steps:
    - name: Wait for Homebrew workflow
      run: |
        echo "⏳ Waiting for Homebrew deployment to complete..."
        echo "Tag: ${{ needs.create-release-tag.outputs.tag_name }}"
        echo "Version: ${{ needs.create-release-tag.outputs.new_version }}"
        
        # The tag push will trigger the homebrew.yml workflow
        # This job ensures proper sequencing
        sleep 30
        echo "✅ Homebrew deployment should be in progress"

  # Post-release validation and notification
  post-release:
    name: Post-Release Validation
    runs-on: macos-latest
    needs: [create-release-tag, wait-for-homebrew]
    
    steps:
    - name: Validate release
      run: |
        TAG_NAME="${{ needs.create-release-tag.outputs.tag_name }}"
        NEW_VERSION="${{ needs.create-release-tag.outputs.new_version }}"
        
        echo "🔍 Validating release ${TAG_NAME}..."
        
        # Check if GitHub release was created
        echo "📋 GitHub Release: Check manually at https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}"
        
        # Test Homebrew tap after some delay
        echo "⏳ Waiting for Homebrew tap propagation..."
        sleep 60
        
        # Try to fetch from tap
        brew tap snooky23/tools || true
        
        if brew info apple-deploy 2>/dev/null | grep -q "${NEW_VERSION}"; then
          echo "✅ Homebrew formula updated successfully"
        else
          echo "⚠️ Homebrew formula may still be propagating"
        fi
        
    - name: Create release summary
      run: |
        TAG_NAME="${{ needs.create-release-tag.outputs.tag_name }}"
        NEW_VERSION="${{ needs.create-release-tag.outputs.new_version }}"
        
        cat > release_summary.md << EOF
        # 🎉 Release Summary: ${TAG_NAME}
        
        ## ✅ Completed Steps
        - [x] Version bumped from previous to **${NEW_VERSION}**
        - [x] Git tag created: **${TAG_NAME}**
        - [x] Homebrew formula deployment triggered
        - [x] GitHub release created
        - [x] Documentation updated
        
        ## 🔗 Links
        - **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}
        - **Homebrew Installation**: \`brew tap snooky23/tools && brew install apple-deploy\`
        - **Documentation**: https://github.com/${{ github.repository }}/blob/main/README.md
        
        ## 📊 Release Details  
        - **Release Type**: ${{ github.event.inputs.release_type }}
        - **Pre-release**: ${{ github.event.inputs.pre_release }}
        - **Triggered By**: @${{ github.actor }}
        - **Workflow Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        ## 🚀 Next Steps for Users
        1. Update existing installation: \`brew upgrade apple-deploy\`
        2. Or fresh install: \`brew tap snooky23/tools && brew install apple-deploy\`
        3. Verify version: \`apple-deploy version\`
        
        ---
        
        🤖 Generated with GitHub Actions
        EOF
        
        echo "📋 Release Summary:"
        cat release_summary.md
        
    - name: Post to GitHub Discussions (if enabled)
      run: |
        echo "💬 Consider posting release announcement to GitHub Discussions"
        echo "🐦 Consider announcing on social media/community channels"
        echo "📧 Consider notifying key stakeholders"
        
        # Placeholder for future notification integrations
        # Could add Slack, Discord, email notifications here
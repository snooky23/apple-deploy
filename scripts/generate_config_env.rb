#!/usr/bin/env ruby

# Script to generate config.env file with the actual parameters used
# This helps users understand what configuration was used in the last run

require 'time'
require_relative 'fastlane/modules/core/logger'

def generate_config_env(options = {})
  config_content = <<~CONFIG
    # iOS Publishing Automation Platform - Configuration Reference
    # This file documents the configuration parameters used for the last automation run
    # NOTE: This file is for reference only and contains the actual values used

    # Last Run Configuration - Generated: #{Time.now.strftime("%Y-%m-%d %H:%M:%S")}
    # App Information
    APP_IDENTIFIER=#{options[:app_identifier] || 'com.example.app'}
    APP_NAME="#{options[:app_name] || 'Example App'}"
    SCHEME=#{options[:scheme] || 'App'}
    CONFIGURATION=#{options[:configuration] || 'Release'}

    # Apple Developer Account
    APPLE_ID=#{options[:apple_id] || 'developer@example.com'}
    TEAM_ID=#{options[:team_id] || 'TEAMID1234'}

    # App Store Connect API
    API_KEY_ID=#{options[:api_key_id] || 'APIKEY1234'}
    API_ISSUER_ID=#{options[:api_issuer_id] || '00000000-0000-0000-0000-000000000000'}
    API_KEY_PATH=#{options[:api_key_path] || '../certificates/AuthKey_APIKEY1234.p8'}

    # Generated/Dynamic Values (Auto-calculated)
    PROVISIONING_PROFILE_NAME=#{options[:app_identifier] || 'com.example.app'} AppStore
    DEVELOPMENT_PROFILE_NAME=#{options[:app_identifier] || 'com.example.app'} Development
    OUTPUT_NAME=#{options[:app_name] || 'ExampleApp'}_v#{Time.now.strftime('%Y%m%d_%H%M%S')}

    # File Paths (Auto-generated - will be overridden by deploy.sh)
    CERTIFICATES_DIR=../certificates/
    PROFILES_DIR=../profiles/
    BUILD_DIR=./build/

    # Build Configuration
    EXPORT_METHOD=app-store-connect
    SIGNING_STYLE=manual
    CODESIGNING_IDENTITY="iPhone Distribution"
    DESTINATION="generic/platform=iOS"
    SDK=iphoneos

    # TestFlight Upload Settings
    UPLOAD_BITCODE=false
    UPLOAD_SYMBOLS=true
    COMPILE_BITCODE=false
    THINNING="<none>"

    # Build Information (Updated per run)
    CURRENT_PROJECT_VERSION=#{get_current_build_number}
    MARKETING_VERSION=#{get_current_version_number}

    # Certificate Information
    DEVELOPMENT_CERT_ID=#{get_certificate_id('development')}
    DISTRIBUTION_CERT_ID=#{get_certificate_id('distribution')}

    # Important Notes:
    # - This file is regenerated after each successful automation run
    # - Do not edit this file manually - it's for reference only
    # - All sensitive files (certificates, profiles, API keys) are stored in gitignored directories
    # - The provisioning profile names are dynamically generated as: "\${APP_IDENTIFIER} AppStore" and "\${APP_IDENTIFIER} Development"
    # - The automation platform is fully generic and works with any iOS app by changing the APP_IDENTIFIER parameter
  CONFIG

  # Write to config.env file
  File.write('config.env', config_content)
  FastlaneLogger.success("Generated config.env with current configuration")
end

def get_current_build_number
  # Try to get build number from Xcode project if available
  if File.exist?('app/Test.xcodeproj/project.pbxproj')
    content = File.read('app/Test.xcodeproj/project.pbxproj')
    match = content.match(/CURRENT_PROJECT_VERSION = (\d+);/)
    return match[1] if match
  end
  "1"
end

def get_current_version_number
  # Try to get version number from Xcode project if available
  if File.exist?('app/Test.xcodeproj/project.pbxproj')
    content = File.read('app/Test.xcodeproj/project.pbxproj')
    match = content.match(/MARKETING_VERSION = ([^;]+);/)
    return match[1] if match
  end
  "1.0"
end

def get_certificate_id(type)
  # Try to get certificate IDs from certificate files
  cert_dir = 'certificates'
  return "AUTO_GENERATED" unless File.exist?(cert_dir)
  
  pattern = type == 'development' ? '*Developer*' : '*Distribution*'
  cert_files = Dir.glob(File.join(cert_dir, "#{pattern}.cer"))
  
  if cert_files.any?
    # Extract certificate serial or identifier from filename
    filename = File.basename(cert_files.first, '.cer')
    # Look for certificate ID pattern in the filename
    match = filename.match(/([A-Z0-9]{10})/)
    return match[1] if match
  end
  
  "AUTO_GENERATED"
end

# If script is run directly (not required as library)
if __FILE__ == $0
  # Parse command line arguments if provided
  options = {}
  
  # Simple argument parsing for key=value pairs
  ARGV.each do |arg|
    if arg.include?('=')
      key, value = arg.split('=', 2)
      options[key.to_sym] = value
    end
  end
  
  generate_config_env(options)
end